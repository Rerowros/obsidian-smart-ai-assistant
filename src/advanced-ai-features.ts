import { TFile, Vault, Notice } from 'obsidian';
import { GoogleAIService } from './googleai-service';
import { GoogleAISettings } from './types';

export class AdvancedAIFeatures {
	private vault: Vault;
	private aiService: GoogleAIService;
	private settings: GoogleAISettings;

	constructor(vault: Vault, aiService: GoogleAIService, settings: GoogleAISettings) {
		this.vault = vault;
		this.aiService = aiService;
		this.settings = settings;
	}

	/**
	 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	 */
	async analyzeVaultStructure(): Promise<string> {
		const files = this.vault.getMarkdownFiles();
		const analysis = {
			totalFiles: files.length,
			categories: new Map<string, number>(),
			averageLength: 0,
			orphanFiles: 0,
			duplicateTopics: new Set<string>(),
			suggestions: []
		};

		let totalLength = 0;
		const topics = new Set<string>();
		const connections = new Map<string, Set<string>>();

		for (const file of files) {
			try {
				const content = await this.vault.read(file);
				totalLength += content.length;

				// –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –ø–∞–ø–∫–∞–º
				const folder = file.parent?.name || 'root';
				analysis.categories.set(folder, (analysis.categories.get(folder) || 0) + 1);

				// –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–µ–º
				const title = file.basename.toLowerCase();
				if (topics.has(title)) {
					analysis.duplicateTopics.add(title);
				}
				topics.add(title);

				// –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π
				const links = content.match(/\[\[([^\]]+)\]\]/g) || [];
				const fileConnections = new Set<string>();
				links.forEach(link => {
					const linkedFile = link.replace(/\[\[|\]\]/g, '');
					fileConnections.add(linkedFile);
				});
				connections.set(file.basename, fileConnections);

			} catch (error) {
				console.error(`Failed to analyze file ${file.path}:`, error);
			}
		}

		analysis.averageLength = Math.round(totalLength / files.length);
		analysis.orphanFiles = Array.from(connections.entries())
			.filter(([_, links]) => links.size === 0).length;

		const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–Ω–∞–Ω–∏–π –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${analysis.totalFiles}
- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ñ–∞–π–ª–∞: ${analysis.averageLength} —Å–∏–º–≤–æ–ª–æ–≤
- –§–∞–π–ª–æ–≤ –±–µ–∑ —Å–≤—è–∑–µ–π: ${analysis.orphanFiles}
- –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–µ–º: ${analysis.duplicateTopics.size}

–ö–ê–¢–ï–ì–û–†–ò–ò:
${Array.from(analysis.categories.entries()).map(([cat, count]) => `- ${cat}: ${count} —Ñ–∞–π–ª–æ–≤`).join('\n')}

–ó–ê–î–ê–ß–ê:
1. –û—Ü–µ–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫, —Å–≤—è–∑–Ω–æ—Å—Ç—å)
2. –í—ã—è–≤–∏ –ø—Ä–æ–±–ª–µ–º—ã (–∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏, –¥—É–±–ª–∏–∫–∞—Ç—ã, –ø–ª–æ—Ö–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è)
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
4. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞–Ω–∏–π

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–º.
		`;

		return await this.aiService.generateResponse(prompt);
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏
	 */
	async suggestConnections(fileName?: string): Promise<string> {
		const files = this.vault.getMarkdownFiles();
		let targetFiles: TFile[];

		if (fileName) {
			const targetFile = files.find(f => f.basename === fileName);
			if (!targetFile) {
				throw new Error(`–§–∞–π–ª "${fileName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
			}
			targetFiles = [targetFile];
		} else {
			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 5 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
			targetFiles = files.sort(() => 0.5 - Math.random()).slice(0, 5);
		}

		const connections: string[] = [];

		for (const file of targetFiles) {
			try {
				const content = await this.vault.read(file);
				
				// –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
				const otherFiles = files
					.filter(f => f.path !== file.path)
					.slice(0, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
					.map(f => f.basename);

				const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–º–µ—Ç–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏:

–ó–ê–ú–ï–¢–ö–ê: ${file.basename}
–°–û–î–ï–†–ñ–ê–ù–ò–ï:
${content.substring(0, 1500)} ${content.length > 1500 ? '...' : ''}

–î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´:
${otherFiles.join(', ')}

–ó–ê–î–ê–ß–ê:
1. –ù–∞–π–¥–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π
2. –û–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É —ç—Ç–∏ —Å–≤—è–∑–∏ –ª–æ–≥–∏—á–Ω—ã
3. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∞—Ç—å —Ç–µ–º—ã

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- **–§–∞–π–ª**: –ø—Ä–∏—á–∏–Ω–∞ —Å–≤—è–∑–∏ –∏ —Å–ø–æ—Å–æ–± —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
				`;

				const response = await this.aiService.generateResponse(prompt);
				connections.push(`\n## ${file.basename}\n${response}`);

			} catch (error) {
				console.error(`Failed to analyze connections for ${file.path}:`, error);
			}
		}

		return `# üîó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–≤—è–∑—è–º –º–µ–∂–¥—É –∑–∞–º–µ—Ç–∫–∞–º–∏\n\n${connections.join('\n')}`;
	}

	/**
	 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ–º—ã
	 */
	async generateExploratorQuestions(topic: string): Promise<string> {
		const files = this.vault.getMarkdownFiles();
		const relevantContent: string[] = [];

		// –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
		for (const file of files) {
			try {
				const content = await this.vault.read(file);
				if (content.toLowerCase().includes(topic.toLowerCase()) || 
					file.basename.toLowerCase().includes(topic.toLowerCase())) {
					relevantContent.push(`${file.basename}: ${content.substring(0, 500)}`);
				}
			} catch (error) {
				console.error(`Failed to read file ${file.path}:`, error);
			}
		}

		const prompt = `
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ "${topic}".

–†–ï–õ–ï–í–ê–ù–¢–ù–´–ô –ö–û–ù–¢–ï–ù–¢:
${relevantContent.slice(0, 5).join('\n\n---\n\n')}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π 15-20 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤:

1. **–£–≥–ª—É–±–ª—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã** (5 –≤–æ–ø—Ä–æ—Å–æ–≤) - –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞–Ω–∏–π
2. **–°–≤—è–∑—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã** (5 –≤–æ–ø—Ä–æ—Å–æ–≤) - –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–º–∞–º–∏  
3. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã** (5 –≤–æ–ø—Ä–æ—Å–æ–≤) - –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ
4. **–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã** (5 –≤–æ–ø—Ä–æ—Å–æ–≤) - –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã:
- –°—Ç–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
- –£—á–∏—Ç—ã–≤–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –∑–Ω–∞–Ω–∏—è
- –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –ë—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–º–∏
		`;

		return await this.aiService.generateResponse(prompt);
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞–Ω–∏–π
	 */
	async createLearningPlan(topic: string, timeframe: string = '1 –º–µ—Å—è—Ü'): Promise<string> {
		const files = this.vault.getMarkdownFiles();
		const relevantFiles: { file: TFile, content: string }[] = [];

		// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		for (const file of files) {
			try {
				const content = await this.vault.read(file);
				if (content.toLowerCase().includes(topic.toLowerCase()) || 
					file.basename.toLowerCase().includes(topic.toLowerCase())) {
					relevantFiles.push({ file, content: content.substring(0, 800) });
				}
			} catch (error) {
				console.error(`Failed to read file ${file.path}:`, error);
			}
		}

		const currentKnowledge = relevantFiles.map(rf => 
			`**${rf.file.basename}**: ${rf.content}`
		).join('\n\n');

		const prompt = `
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã "${topic}" –Ω–∞ –ø–µ—Ä–∏–æ–¥ "${timeframe}".

–¢–ï–ö–£–©–ò–ï –ó–ù–ê–ù–ò–Ø:
${currentKnowledge || '–ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:

1. **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è**
   - –ß—Ç–æ —É–∂–µ –∏–∑—É—á–µ–Ω–æ
   - –ü—Ä–æ–±–µ–ª—ã –≤ –∑–Ω–∞–Ω–∏—è—Ö
   - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã

2. **–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è** (SMART —Ü–µ–ª–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)

3. **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω** —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏:
   - –ß—Ç–æ –∏–∑—É—á–∞—Ç—å
   - –ö–∞–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—Ç—å
   - –ö–∞–∫ –∏–∑–º–µ—Ä—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

4. **–†–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è**
   - –ö–Ω–∏–≥–∏ –∏ —Å—Ç–∞—Ç—å–∏
   - –û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã
   - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã

5. **–ú–µ—Ç–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞**

6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ–¥–µ–Ω–∏—é –∑–∞–º–µ—Ç–æ–∫** –≤ Obsidian

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–º–µ—é—â—É—é—Å—è –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
		`;

		return await this.aiService.generateResponse(prompt);
	}

	/**
	 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
	 */
	async improveNote(filePath: string): Promise<string> {
		const file = this.vault.getAbstractFileByPath(filePath);
		if (!file || !(file instanceof TFile)) {
			throw new Error(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
		}

		const content = await this.vault.read(file);
		const otherFiles = this.vault.getMarkdownFiles()
			.filter(f => f.path !== file.path)
			.slice(0, 10)
			.map(f => f.basename);

		const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–º–µ—Ç–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è:

–ó–ê–ú–ï–¢–ö–ê: ${file.basename}
–°–û–î–ï–†–ñ–ê–ù–ò–ï:
${content}

–î–†–£–ì–ò–ï –§–ê–ô–õ–´ –í –•–†–ê–ù–ò–õ–ò–©–ï:
${otherFiles.join(', ')}

–ó–ê–î–ê–ß–ê:
1. **–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞**:
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
   - –ü–æ–ª–Ω–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   - –Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è

2. **–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é**:
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
   - –ù–µ–¥–æ—Å—Ç–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   - –£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

3. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–≤—è–∑—è–º**:
   - –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
   - –¢–µ–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
   - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏

4. **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è**:
   - –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å
   - –ß—Ç–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å
   - –ö–∞–∫ –ª—É—á—à–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å

–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
		`;

		return await this.aiService.generateResponse(prompt);
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≤—Å–µ—Ö –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ
	 */
	async createTopicSummary(topic: string): Promise<string> {
		const files = this.vault.getMarkdownFiles();
		const relevantContent: string[] = [];

		for (const file of files) {
			try {
				const content = await this.vault.read(file);
				if (content.toLowerCase().includes(topic.toLowerCase()) || 
					file.basename.toLowerCase().includes(topic.toLowerCase())) {
					relevantContent.push(`# ${file.basename}\n${content}`);
				}
			} catch (error) {
				console.error(`Failed to read file ${file.path}:`, error);
			}
		}

		if (relevantContent.length === 0) {
			return `–ü–æ —Ç–µ–º–µ "${topic}" –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`;
		}

		const prompt = `
–°–æ–∑–¥–∞–π –≤—Å–µ–æ–±—ä–µ–º–ª—é—â–µ–µ —Ä–µ–∑—é–º–µ –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–µ–º–µ "${topic}" –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

–°–û–î–ï–†–ñ–ò–ú–û–ï:
${relevantContent.join('\n\n---\n\n')}

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ:

1. **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏** - –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
2. **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑** - —É–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–¥—Ç–µ–º–∞–º  
3. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è** - –ø—Ä–∏–º–µ—Ä—ã –∏ —Å–ª—É—á–∞–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
4. **–°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ–º–∞–º–∏** - –∫–∞–∫ —Ç–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –∑–Ω–∞–Ω–∏–π
5. **–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã** - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
6. **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è** - —á—Ç–æ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ

–†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–æ–≥–∏—á–Ω—ã–º
- –ü–æ–ª–Ω—ã–º –Ω–æ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º
- –û—Å–Ω–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ì–æ—Ç–æ–≤—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
		`;

		return await this.aiService.generateResponse(prompt);
	}
}
