import { App, TFile, Notice, TFolder } from 'obsidian';
import { ClickableResult, SearchHistoryItem, WebSearchResult, CodeExecutionResult } from './types';

export class FileManager {
	private app: App;
	private searchFolderPath: string;

	constructor(app: App, searchFolderPath: string = 'Search Results') {
		this.app = app;
		this.searchFolderPath = searchFolderPath;
	}

	updateSearchFolderPath(path: string) {
		this.searchFolderPath = path;
	}

	async ensureSearchFolderExists(): Promise<TFolder> {
		const folder = this.app.vault.getAbstractFileByPath(this.searchFolderPath);
		
		if (folder && folder instanceof TFolder) {
			return folder;
		}

		try {
			return await this.app.vault.createFolder(this.searchFolderPath);
		} catch (error) {
			console.error('Failed to create search folder:', error);
			throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –ø–æ–∏—Å–∫–∞: ${this.searchFolderPath}`);
		}
	}

	async saveSearchResult(
		historyItem: SearchHistoryItem, 
		includeMetadata: boolean = true
	): Promise<string> {
		await this.ensureSearchFolderExists();
		
		const timestamp = new Date(historyItem.timestamp);
		const dateStr = timestamp.toISOString().slice(0, 19).replace(/:/g, '-');
		const fileName = `Search-${dateStr}.md`;
		const filePath = `${this.searchFolderPath}/${fileName}`;

		let content = this.formatSearchResultContent(historyItem, includeMetadata);

		try {
			const file = await this.app.vault.create(filePath, content);
			new Notice(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);
			return file.path;
		} catch (error) {
			console.error('Failed to save search result:', error);
			throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
		}
	}

	private formatSearchResultContent(item: SearchHistoryItem, includeMetadata: boolean): string {
		const timestamp = new Date(item.timestamp).toLocaleString('ru-RU');
		
		let content = '';
		
		if (includeMetadata) {
			content += `---\n`;
			content += `title: "–ü–æ–∏—Å–∫: ${item.query}"\n`;
			content += `date: ${timestamp}\n`;
			content += `query: "${item.query}"\n`;
			content += `model: "${item.stats.strategy}"\n`;
			content += `duration: ${item.stats.duration}ms\n`;
			content += `files_searched: ${item.stats.filesSearched}\n`;
			content += `tokens_used: ${item.stats.tokensUsed.totalTokens}\n`;
			if (item.bookmarked) {
				content += `bookmarked: true\n`;
			}
			content += `---\n\n`;
		}

		content += `# üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞\n\n`;
		content += `**–ó–∞–ø—Ä–æ—Å:** ${item.query}\n\n`;
		content += `**–î–∞—Ç–∞:** ${timestamp}\n\n`;

		// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		content += `## üìù –û—Ç–≤–µ—Ç\n\n`;
		content += item.response + '\n\n';

		// –í–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
		if (item.webResults && item.webResults.length > 0) {
			content += `## üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n\n`;
			item.webResults.forEach((result, index) => {
				content += `### ${index + 1}. ${result.title}\n`;
				content += `**URL:** [${result.url}](${result.url})\n`;
				content += `**–ò—Å—Ç–æ—á–Ω–∏–∫:** ${result.source}\n`;
				if (result.snippet) {
					content += `**–û–ø–∏—Å–∞–Ω–∏–µ:** ${result.snippet}\n`;
				}
				content += '\n';
			});
		}

		// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
		if (item.codeExecutionResults && item.codeExecutionResults.length > 0) {
			content += `## üíª –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞\n\n`;
			item.codeExecutionResults.forEach((result, index) => {
				content += `### –ö–æ–¥ ${index + 1} (${result.language})\n\n`;
				content += `\`\`\`${result.language}\n${result.code}\n\`\`\`\n\n`;
				if (result.output) {
					content += `**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\`\`\`\n${result.output}\n\`\`\`\n\n`;
				}
				if (result.error) {
					content += `**–û—à–∏–±–∫–∞:**\n\`\`\`\n${result.error}\n\`\`\`\n\n`;
				}
				if (result.executionTime) {
					content += `**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${result.executionTime}ms\n\n`;
				}
			});
		}

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
		if (includeMetadata) {
			content += `## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞\n\n`;
			content += `- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${item.stats.duration}ms\n`;
			content += `- **–§–∞–π–ª–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ:** ${item.stats.filesSearched}\n`;
			content += `- **–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${item.stats.tokensUsed.totalTokens}\n`;
			content += `  - –í—Ö–æ–¥–Ω—ã–µ: ${item.stats.tokensUsed.inputTokens}\n`;
			content += `  - –í—ã—Ö–æ–¥–Ω—ã–µ: ${item.stats.tokensUsed.outputTokens}\n`;
			content += `- **–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞:** ${item.stats.strategy}\n`;
		}

		return content;
	}

	createClickableFileLink(filePath: string, displayText?: string): ClickableResult {
		return {
			type: 'file',
			text: displayText || filePath,
			action: () => {
				const file = this.app.vault.getAbstractFileByPath(filePath);
				if (file instanceof TFile) {
					this.app.workspace.getLeaf().openFile(file);
				} else {
					new Notice(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
				}
			},
			tooltip: `–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: ${filePath}`
		};
	}

	createClickableWebLink(webResult: WebSearchResult): ClickableResult {
		return {
			type: 'web',
			text: webResult.title,
			action: () => {
				window.open(webResult.url, '_blank');
			},
			tooltip: `–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: ${webResult.url}`
		};
	}

	createClickableCodeResult(codeResult: CodeExecutionResult): ClickableResult {
		return {
			type: 'code',
			text: `–ö–æ–¥ (${codeResult.language})`,
			action: () => {
				navigator.clipboard.writeText(codeResult.code).then(() => {
					new Notice('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
				});
			},
			tooltip: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
		};
	}

	async exportSearchHistory(history: SearchHistoryItem[]): Promise<void> {
		await this.ensureSearchFolderExists();
		
		const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
		const fileName = `Search-History-Export-${timestamp}.md`;
		const filePath = `${this.searchFolderPath}/${fileName}`;

		let content = `# üìö –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n\n`;
		content += `**–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** ${new Date().toLocaleString('ru-RU')}\n`;
		content += `**–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:** ${history.length}\n\n`;

		content += `---\n\n`;

		history.forEach((item, index) => {
			const itemTimestamp = new Date(item.timestamp).toLocaleString('ru-RU');
			content += `## ${index + 1}. ${item.query}\n\n`;
			content += `**–î–∞—Ç–∞:** ${itemTimestamp}\n`;
			if (item.bookmarked) {
				content += `**‚≠ê –í –∑–∞–∫–ª–∞–¥–∫–∞—Ö**\n`;
			}
			content += `**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${item.stats.duration}ms\n`;
			content += `**–¢–æ–∫–µ–Ω–æ–≤:** ${item.stats.tokensUsed.totalTokens}\n\n`;
			
			content += `### –û—Ç–≤–µ—Ç\n\n`;
			content += item.response + '\n\n';
			
			if (item.webResults && item.webResults.length > 0) {
				content += `### –í–µ–±-–∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n`;
				item.webResults.forEach(result => {
					content += `- [${result.title}](${result.url})\n`;
				});
				content += '\n';
			}
			
			content += `---\n\n`;
		});

		try {
			await this.app.vault.create(filePath, content);
			new Notice(`–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${fileName}`);
		} catch (error) {
			console.error('Failed to export search history:', error);
			new Notice(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: ${error.message}`);
		}
	}

	renderClickableElement(container: HTMLElement, result: ClickableResult): HTMLElement {
		const element = container.createEl('span', {
			cls: `clickable-result clickable-${result.type} file-manager-result ${result.type}`,
			text: result.text
		});

		// –°—Ç–∏–ª–∏ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ CSS —Ñ–∞–π–ª–µ
		if (result.tooltip) {
			element.title = result.tooltip;
		}

		element.addEventListener('click', (e) => {
			e.preventDefault();
			e.stopPropagation();
			result.action();
		});

		return element;
	}
}
