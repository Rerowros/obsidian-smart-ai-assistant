import { GoogleGenAI } from '@google/genai';
import { GoogleAIModel, GoogleAISettings, TokenUsage, WebSearchResult, CodeExecutionResult } from './types';
import { getPrompts, formatPrompt } from './prompts';

export class GoogleAIService {
	private genAI: GoogleGenAI | null = null;
	private settings: GoogleAISettings;
	private tokenUsage: TokenUsage = { inputTokens: 0, outputTokens: 0, totalTokens: 0 };

	constructor(settings: GoogleAISettings) {
		this.settings = settings;
		this.initializeAPI();
	}

	private initializeAPI() {
		if (!this.settings.apiKey) {
			return;
		}

		try {
			this.genAI = new GoogleGenAI({ apiKey: this.settings.apiKey });
			console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Google Gen AI —Å API –∫–ª—é—á–æ–º`);
		} catch (error) {
			console.error('Failed to initialize Google Gen AI:', error);
			this.genAI = null;
		}
	}

	private isThinkingModel(modelName: string): boolean {
		// Thinking mode –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –º–æ–¥–µ–ª—è—Ö 2.5 —Å–µ—Ä–∏–∏
		return modelName.includes('2.5');
	}

	updateSettings(settings: GoogleAISettings) {
		this.settings = settings;
		this.initializeAPI();
	}

	async listModels(): Promise<GoogleAIModel[]> {
		if (!this.genAI) {
			throw new Error('Google AI API not initialized');
		}

		try {
			// –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ listModels, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
			return this.getDefaultModels();
		} catch (error) {
			console.error('Failed to fetch models:', error);
			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
			return this.getDefaultModels();
		}
	}

	private getDefaultModels(): GoogleAIModel[] {
		return [
			{
				name: 'gemini-2.5-flash',
				displayName: 'Gemini 2.5 Flash ‚ö°',
				description: '–ë—ã—Å—Ç—Ä—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π thinking mode',
				inputTokenLimit: 1000000,
				outputTokenLimit: 32768
			},
			{
				name: 'gemini-2.5-pro',
				displayName: 'Gemini 2.5 Pro ÔøΩ',
				description: '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º thinking',
				inputTokenLimit: 2000000,
				outputTokenLimit: 32768
			},
			{
				name: 'gemini-2.5-flash-lite',
				displayName: 'Gemini 2.5 Flash Lite ü™∂',
				description: '–û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
				inputTokenLimit: 1000000,
				outputTokenLimit: 32768
			},
			{
				name: 'gemini-2.0-flash',
				displayName: 'Gemini 2.0 Flash ‚≠ê',
				description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é',
				inputTokenLimit: 1000000,
				outputTokenLimit: 32768
			}
		];
	}

	async generateResponse(prompt: string, context?: string): Promise<string> {
		if (!this.genAI) {
			throw new Error('Google Gen AI not initialized. Please check your API key and settings.');
		}

		try {
			const prompts = getPrompts(this.settings.language);
			let fullPrompt = formatPrompt(prompts.smartSearch, {
				context: context || '',
				query: prompt
			});

			// –ü–æ–¥—Å—á–µ—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
			const inputTokens = this.estimateTokens(fullPrompt);
			
			// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ API
			const config: any = {
				model: this.settings.selectedModel,
				contents: fullPrompt,
				config: {
					generationConfig: {
						temperature: this.settings.temperature,
						maxOutputTokens: this.settings.maxTokens,
					}
				}
			};

			// –î–æ–±–∞–≤–ª—è–µ–º thinking config –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
			if (this.settings.thinkingMode && this.isThinkingModel(this.settings.selectedModel)) {
				config.config.thinkingConfig = {
					thinkingBudget: this.settings.thinkingBudget,
					includeThoughts: true
				};
			}

			const result = await this.genAI.models.generateContent(config);
			const text = result.text || '';
			
			// –ü–æ–¥—Å—á–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
			const outputTokens = this.estimateTokens(text);
			
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
			this.tokenUsage.inputTokens += inputTokens;
			this.tokenUsage.outputTokens += outputTokens;
			this.tokenUsage.totalTokens = this.tokenUsage.inputTokens + this.tokenUsage.outputTokens;
			
			return text;
		} catch (error) {
			console.error('Failed to generate response:', error);
			
			// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
			if (error.message?.includes('is not found for API version')) {
				throw new Error(`‚ùå –ú–æ–¥–µ–ª—å "${this.settings.selectedModel}" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "gemini-2.5-flash" –∏–ª–∏ "gemini-2.5-pro".
				
–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ  
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤–∞—à–µ–≥–æ Google AI API
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å`);
			}
			
			throw error;
		}
	}

	async generateStreamResponse(prompt: string, context?: string, onChunk?: (chunk: string) => void): Promise<string> {
		if (!this.genAI) {
			throw new Error('Google Gen AI not initialized. Please check your API key and settings.');
		}

		try {
			const prompts = getPrompts(this.settings.language);
			let fullPrompt = formatPrompt(prompts.smartSearch, {
				context: context || '',
				query: prompt
			});

			const inputTokens = this.estimateTokens(fullPrompt);
			
			// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
			const config: any = {
				model: this.settings.selectedModel,
				contents: fullPrompt,
				config: {
					generationConfig: {
						temperature: this.settings.temperature,
						maxOutputTokens: this.settings.maxTokens,
					}
				}
			};

			// –î–æ–±–∞–≤–ª—è–µ–º thinking config –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
			if (this.settings.thinkingMode && this.isThinkingModel(this.settings.selectedModel)) {
				config.config.thinkingConfig = {
					thinkingBudget: this.settings.thinkingBudget,
					includeThoughts: true
				};
			}

			const result = await this.genAI.models.generateContentStream(config);
			let fullText = '';

			for await (const chunk of result) {
				const chunkText = chunk.text || '';
				fullText += chunkText;
				onChunk?.(chunkText);
			}

			const outputTokens = this.estimateTokens(fullText);
			this.tokenUsage.inputTokens += inputTokens;
			this.tokenUsage.outputTokens += outputTokens;
			this.tokenUsage.totalTokens = this.tokenUsage.inputTokens + this.tokenUsage.outputTokens;

			return fullText;
		} catch (error) {
			console.error('Failed to generate stream response:', error);
			
			// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
			if (error.message?.includes('is not found for API version')) {
				throw new Error(`‚ùå –ú–æ–¥–µ–ª—å "${this.settings.selectedModel}" –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "gemini-2.5-flash" –∏–ª–∏ "gemini-2.5-pro".
				
–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ  
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤–∞—à–µ–≥–æ Google AI API
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å`);
			}
			
			throw error;
		}
	}

	private estimateTokens(text: string): number {
		// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ª–∞—Ç–∏–Ω–∏—Ü—ã, 2-3 –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
		const avgCharsPerToken = 3.5;
		return Math.ceil(text.length / avgCharsPerToken);
	}

	getTokenUsage(): TokenUsage {
		return { ...this.tokenUsage };
	}

	resetTokenUsage(): void {
		this.tokenUsage = { inputTokens: 0, outputTokens: 0, totalTokens: 0 };
	}

	async performWebSearch(query: string): Promise<WebSearchResult[]> {
		if (!this.settings.useWebSearch) {
			return [];
		}

		try {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Search grounding —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏
			// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google Search grounding
			const groundingPrompt = `–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"
			
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
2. –ö–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ü–∏—Ç–∞—Ç—ã
3. URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ

–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;

			const response = await this.generateResponse(groundingPrompt);
			
			// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Google Search grounding
			return this.parseWebSearchResults(response);
		} catch (error) {
			console.error('Web search failed:', error);
			return [];
		}
	}

	private parseWebSearchResults(response: string): WebSearchResult[] {
		// –ë–∞–∑–æ–≤–∞—è –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		// –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è API Google Grounding
		const results: WebSearchResult[] = [];
		
		// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
		const lines = response.split('\n');
		let currentResult: Partial<WebSearchResult> = {};
		
		for (const line of lines) {
			if (line.includes('http')) {
				if (currentResult.title) {
					results.push(currentResult as WebSearchResult);
					currentResult = {};
				}
				currentResult.url = line.trim();
			} else if (line.trim() && !currentResult.title) {
				currentResult.title = line.trim();
			} else if (line.trim() && currentResult.title && !currentResult.snippet) {
				currentResult.snippet = line.trim();
				currentResult.source = 'Web Search';
			}
		}
		
		if (currentResult.title) {
			results.push(currentResult as WebSearchResult);
		}
		
		return results.slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	}

	async executeCode(code: string, language: string = 'python'): Promise<CodeExecutionResult> {
		if (!this.settings.useCodeExecution) {
			throw new Error('Code execution is disabled');
		}

		try {
			const prompts = getPrompts(this.settings.language);
			const executionPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –æ–±—ä—è—Å–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ ${language}:

\`\`\`${language}
${code}
\`\`\`

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:
1. –û–±—ä—è—Å–Ω–∏ —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥
2. –ü–æ–∫–∞–∂–∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
3. –£–∫–∞–∂–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è
4. –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç Code Execution API.`;

			const startTime = Date.now();
			const response = await this.generateResponse(executionPrompt);
			const executionTime = Date.now() - startTime;

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
			const result: CodeExecutionResult = {
				code,
				language,
				output: response,
				executionTime
			};

			return result;
		} catch (error) {
			return {
				code,
				language,
				output: '',
				error: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: ${error.message}`,
				executionTime: 0
			};
		}
	}

	async intelligentSearch(query: string, vaultContent: string[]): Promise<string> {
		if (!this.genAI) {
			throw new Error('Google Gen AI not initialized');
		}

		const contextContent = vaultContent.slice(0, this.settings.contextLimit).join('\n\n---\n\n');
		
		const prompts = getPrompts(this.settings.language);
		const searchPrompt = formatPrompt(prompts.smartSearch, {
			context: contextContent,
			query: query
		});

		return await this.generateResponse(searchPrompt);
	}

	isConfigured(): boolean {
		return !!this.settings.apiKey && !!this.genAI;
	}
}
